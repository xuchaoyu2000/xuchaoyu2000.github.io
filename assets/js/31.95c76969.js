(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{155:function(t,a,s){"use strict";s.r(a);var e=s(0),r=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" 正则表达式")]),s("h3",{attrs:{id:"作者：blackxu"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作者：blackxu","aria-hidden":"true"}},[t._v("#")]),t._v(" 作者：BlackXu")]),s("h2",{attrs:{id:"js通过内置对象regexp支持正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js通过内置对象regexp支持正则表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" JS通过内置对象RegExp支持正则表达式")]),s("h3",{attrs:{id:"两种方法支持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两种方法支持","aria-hidden":"true"}},[t._v("#")]),t._v(" 两种方法支持")]),s("ul",[s("li",[t._v("字面量 "),s("code",[t._v("const reg = /\\bblack\\b/g")]),t._v(";")]),s("li",[t._v("构造函数 "),s("code",[t._v("const reg = new RegExp('\\\\bblack\\\\b','g')")]),t._v(";")])]),s("h3",{attrs:{id:"修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修饰符","aria-hidden":"true"}},[t._v("#")]),t._v(" 修饰符")]),s("ul",[s("li",[s("code",[t._v("g")]),t._v("：全文搜索")]),s("li",[s("code",[t._v("i")]),t._v("：忽略大小写")]),s("li",[s("code",[t._v("m")]),t._v("：多行搜索")])]),s("h3",{attrs:{id:"元字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元字符","aria-hidden":"true"}},[t._v("#")]),t._v(" 元字符")]),s("ul",[s("li",[s("code",[t._v("\\t")]),t._v("：水平制表符")]),s("li",[s("code",[t._v("\\v")]),t._v("：垂直制表符")]),s("li",[s("code",[t._v("\\n")]),t._v("：换行符")]),s("li",[s("code",[t._v("\\r")]),t._v("：回车符")]),s("li",[s("code",[t._v("\\0")]),t._v("：空字符")]),s("li",[s("code",[t._v("\\f")]),t._v("：换页符")]),s("li",[s("code",[t._v("\\cX")]),t._v("：与X对应的控制字符（Ctrl+X）")])]),s("h3",{attrs:{id:"字符类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符类","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符类")]),s("ul",[s("li",[t._v("用元字符"),s("code",[t._v("[ ]")]),t._v("构建简单类，如"),s("code",[t._v("[black]")]),t._v("，其实就是或的意思。")])]),s("h3",{attrs:{id:"字符串取反"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串取反","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符串取反")]),s("ul",[s("li",[t._v("用"),s("code",[t._v("^")]),t._v("创建反向类，如"),s("code",[t._v("[^black]")])])]),s("h3",{attrs:{id:"范围类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#范围类","aria-hidden":"true"}},[t._v("#")]),t._v(" 范围类")]),s("ul",[s("li",[s("code",[t._v("[a-z]")]),t._v("表示小写字母，还有类似的大写字母和数字，还可以连写"),s("code",[t._v("[a-zA-Z0-9]")])])]),s("h3",{attrs:{id:"预定义类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预定义类","aria-hidden":"true"}},[t._v("#")]),t._v(" 预定义类")]),s("ul",[s("li",[s("code",[t._v(".")]),t._v(":除了换行回车外的其他所有字符")]),s("li",[s("code",[t._v("\\d")]),t._v("：数字字符")]),s("li",[s("code",[t._v("\\D")]),t._v("：非数字字符")]),s("li",[s("code",[t._v("\\s")]),t._v("：空白符")]),s("li",[s("code",[t._v("\\S")]),t._v("：非空白符")]),s("li",[s("code",[t._v("\\w")]),t._v("：单词字符（字母、数字下划线）")]),s("li",[s("code",[t._v("\\W")]),t._v("：非单词字符")])]),s("h3",{attrs:{id:"边界"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#边界","aria-hidden":"true"}},[t._v("#")]),t._v(" 边界")]),s("ul",[s("li",[s("code",[t._v("\\b")]),t._v("：单词边界")]),s("li",[s("code",[t._v("\\B")]),t._v("：非单词边界")]),s("li",[s("code",[t._v("^")]),t._v("：开始边界")]),s("li",[s("code",[t._v("$")]),t._v("：结束边界")])]),s("h3",{attrs:{id:"量词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#量词","aria-hidden":"true"}},[t._v("#")]),t._v(" 量词")]),s("ul",[s("li",[s("code",[t._v("？")]),t._v("：出现0次或1次")]),s("li",[s("code",[t._v("+")]),t._v("：至少出现1次")]),s("li",[s("code",[t._v("*")]),t._v("：出现任意次")]),s("li",[s("code",[t._v("{n}")]),t._v("：出现n次")]),s("li",[s("code",[t._v("{n,m}")]),t._v("：出现n次到m次")]),s("li",[s("code",[t._v("{n,}")]),t._v("：至少出现n次")])]),s("h3",{attrs:{id:"贪婪模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪婪模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 贪婪模式")]),s("ul",[s("li",[t._v("尽可能多的匹配，默认")])]),s("h3",{attrs:{id:"非贪婪模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非贪婪模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 非贪婪模式")]),s("ul",[s("li",[t._v("在量词后面加"),s("code",[t._v("？")]),t._v("号即可，如"),s("code",[t._v("[\\d｛3,5}?]")]),t._v("，则匹配3个数字。")])]),s("h3",{attrs:{id:"分组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分组","aria-hidden":"true"}},[t._v("#")]),t._v(" 分组")]),s("ul",[s("li",[t._v("使用"),s("code",[t._v("()")]),t._v("来进行分组，后面跟量词来作用")])]),s("h3",{attrs:{id:"或"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#或","aria-hidden":"true"}},[t._v("#")]),t._v(" 或")]),s("ul",[s("li",[t._v("使用"),s("code",[t._v("|")]),t._v("来达到效果，在正则中用"),s("code",[t._v("(a|b)")]),t._v("表示")])]),s("h3",{attrs:{id:"反向引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反向引用","aria-hidden":"true"}},[t._v("#")]),t._v(" 反向引用")]),s("ul",[s("li",[t._v("用"),s("code",[t._v("$")]),t._v("来捕获分组内的内容来引用原文，如"),s("code",[t._v("'2016-10'.replace(/(\\d{4})-（\\d{2}）/g,'$2/$1')")])])]),s("h3",{attrs:{id:"忽略分组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#忽略分组","aria-hidden":"true"}},[t._v("#")]),t._v(" 忽略分组")]),s("ul",[s("li",[t._v("不希望捕获某个分组，在分组内加上"),s("code",[t._v("?:")]),t._v("，如"),s("code",[t._v("(?:Black)(Xu)")])])]),s("h3",{attrs:{id:"前瞻"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前瞻","aria-hidden":"true"}},[t._v("#")]),t._v(" 前瞻")]),s("ul",[s("li",[t._v("正则匹配到规则时，从前向后检查是否符合断言。")]),s("li",[t._v("符合称为正向前瞻"),s("code",[t._v("(?=)")]),t._v("，不符合称为负向前瞻。如"),s("code",[t._v("\\w(?=\\d)")]),t._v("，括号内为断言，不参与规则部分。")]),s("li",[t._v("JS不支持后顾。")])]),s("h3",{attrs:{id:"对象属性（只读）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象属性（只读）","aria-hidden":"true"}},[t._v("#")]),t._v(" 对象属性（只读）")]),s("ul",[s("li",[t._v("global：是否全文搜索，默认false")]),s("li",[t._v("ignore case：是否忽略大小写，默认false")]),s("li",[t._v("multiline：多行搜索，默认false")]),s("li",[t._v("lastIndex：当前表达式匹配内容的最后一个字符的下一个位置（非全局调用都是0）")]),s("li",[t._v("source：正则表达式的文本字符串")])]),s("h3",{attrs:{id:"test方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test方法","aria-hidden":"true"}},[t._v("#")]),t._v(" test方法")]),s("ul",[s("li",[t._v("用于测试字符串参数中是否存在匹配正则表达式模式的字符串，存在返回true，不存在返回false。")]),s("li",[t._v("每次作用字符串后都会影响到lastIndex上。如"),s("code",[t._v("let reg = /\\w/;reg.test('xu');reg.test('xu');reg.test('xu')")]),t._v(";")]),s("li",[t._v("当第三次作用的时候只有两个字符串，就会重置为零再循环，所以会显示false。")])]),s("h3",{attrs:{id:"exec方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exec方法","aria-hidden":"true"}},[t._v("#")]),t._v(" exec方法")]),s("ul",[s("li",[t._v("使用正则表达式模式对字符串执行搜索，并将更新全局RegExp对象的属性以反映匹配的结果。")]),s("li",[t._v("如果没有匹配的文本返回null，否则返回一个结果数组（index声明匹配文本的第一个字符位置，input存放被检索的字符串string）。")]),s("li",[t._v("非全局调用：第一项是匹配的文本，第二项是所有分组的内容。")])]),s("h3",{attrs:{id:"字符串对象方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串对象方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符串对象方法")]),s("ol",[s("li",[s("code",[t._v("String.prototype.search(reg)")])])]),s("ul",[s("li",[t._v("忽略全局标志。")]),s("li",[t._v("可以搜数字、字符串、正则表达式。")]),s("li",[t._v("返回所在的位置。")])]),s("ol",{attrs:{start:"2"}},[s("li",[s("code",[t._v("String.prototype.match(reg)")])])]),s("ul",[s("li",[t._v("没有g标志就只能在字符串中执行一次，没有匹配返回null,有就返回一个存放匹配文本的数组（index声明匹配文本的第一个字符位置，input存放被检索的字符串string）。")]),s("li",[t._v("有g标志返回所有结果，index是undefined，lastIndex还是0。")])]),s("ol",{attrs:{start:"3"}},[s("li",[s("code",[t._v("String.prototype.split(reg)")])])]),s("ul",[s("li",[t._v("将正则当成分割标志。")]),s("li",[t._v("如"),s("code",[t._v("'a1b2c3d4e5'.split(/\\d/g)")])])]),s("ol",{attrs:{start:"4"}},[s("li",[s("code",[t._v("String.prototype.replace()")])])]),s("ul",[s("li",[t._v("两个参数，第一个参数（string或reg）是找谁，第二个参数（string或function）是替换成谁。")]),s("li",[t._v("function会在每次匹配替换的时候调用，有四个参数（匹配字符串、正则表达式分组内容，没有分组则没有该参数、匹配项在字符串中的index、原字符串）。")])]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token string"}},[t._v("'a1b2c3d4e5'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("replace")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token regex"}},[t._v("/(\\d)(\\w)(\\d)/g")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("group1"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("group2"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("group3"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("index"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("orgin"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" group1"),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("group3"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),s("h3",{attrs:{id:"终极实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#终极实例","aria-hidden":"true"}},[t._v("#")]),t._v(" 终极实例")]),s("ul",[s("li",[t._v("使用fcc上的算法题，检验有效的美国电话号码(以下数字组都为有效)。")])]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token number"}},[t._v("555")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token number"}},[t._v("555")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token number"}},[t._v("5555")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("555")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token number"}},[t._v("555")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token number"}},[t._v("5555")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("555")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("555")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token number"}},[t._v("5555")]),t._v("\n"),s("span",{attrs:{class:"token number"}},[t._v("555")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("555")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("5555")]),t._v("\n"),s("span",{attrs:{class:"token number"}},[t._v("5555555555")]),t._v("\n"),s("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("555")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("555")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("5555")]),t._v("\n")])]),s("ul",[s("li",[t._v("答案："),s("code",[t._v("/^1? ?(\\(\\d{3}\\)|\\d{3})[ |-]?\\d{3}[ |-]?\\d{4}$/")])])]),s("h3",{attrs:{id:"工具推荐：regexper"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工具推荐：regexper","aria-hidden":"true"}},[t._v("#")]),t._v(" 工具推荐：RegExper")]),s("ul",[s("li",[s("a",{attrs:{href:"https://regexper.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://regexper.com/")])])])])}],!1,null,null,null);a.default=r.exports}}]);